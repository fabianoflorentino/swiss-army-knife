global
  ulimit-n 100042
  maxconn     4000
  daemon

  # turn on stats unix socket
  stats socket /var/lib/haproxy/stats mode 0600 level admin

### Defaults
defaults
  log global
  option dontlognull
  option http-server-close
  option redispatch
  retries 3
  timeout http-request 10s
  timeout queue 1m
  timeout connect 10s
  timeout client 1m
  timeout server 1m
  timeout http-keep-alive 10s
  timeout check 10s
  maxconn 3000

### Stats
listen  stats :9000
        stats enable
        stats realm Haproxy\ Statistics
        stats uri /haproxy_stats
        stats auth admin:password
        stats refresh 30
        mode http

frontend app
  log /dev/log local0 debug
  bind *:80

{% if haproxy_mode == "http" %}
#
# ACL
{% for acl, app in new_app.items() %}
acl {{ acl }} hdr(host) -i {{ acl }}.{{ my_domain }}
{% endfor %}

{% for acl, app in new_app.items() %}
use_backend app-{{ app.name }} if {{ acl }}
{% endfor %}

{% for acl, app in new_app.items() %}
backend app-{{ app.name }}
  balance {{ balance_algorithm }}
  mode    http
  option httpchk HEAD /
{% for host_name, ip_addr in app.backend.items() %}
    server {{ host_name }} {{ ip_addr }}:{{ app.port_back }} check
{% endfor %}

{% endfor %}
{% endif %}

{% if haproxy_mode == "tcp" %}
{% for acl, app in new_app.items() %}
#
### app-{{ app.name }}
frontend app-{{ app.name }}
  log /dev/log local0 debug
  bind *:{{ app.port_front }}
  default_backend app-{{ app.name }}

backend app-{{ app.name }}
  balance {{ balance_algorithm }}
  mode    tcp
{% for host_name, ip_addr in app.backend.items() %}
    server {{ host_name }} {{ ip_addr }}:{{ app.port_back }} check
{% endfor %}

{% endfor %}
{% endif %}